package org.distantshoresmedia.model.daoModels;

import java.util.List;

import org.distantshoresmedia.model.TKDatabaseModel;
import org.distantshoresmedia.model.daoModels.DaoSession;
import org.json.JSONObject;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here

// KEEP INCLUDES END
/**
 * Entity mapped to table AVAILABLE_KEYBOARD.
 */
public class AvailableKeyboard extends org.distantshoresmedia.model.TKDatabaseModel implements java.io.Serializable {

    private Long id;
    private String isoLanguage;
    private String isoRegion;
    private String languageName;
    private java.util.Date updatedAt;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AvailableKeyboardDao myDao;

    private List<BaseKeyboard> baseKeyboards;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public AvailableKeyboard() {
    }

    public AvailableKeyboard(Long id) {
        this.id = id;
    }

    public AvailableKeyboard(Long id, String isoLanguage, String isoRegion, String languageName, java.util.Date updatedAt) {
        this.id = id;
        this.isoLanguage = isoLanguage;
        this.isoRegion = isoRegion;
        this.languageName = languageName;
        this.updatedAt = updatedAt;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAvailableKeyboardDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getIsoLanguage() {
        return isoLanguage;
    }

    public void setIsoLanguage(String isoLanguage) {
        this.isoLanguage = isoLanguage;
    }

    public String getIsoRegion() {
        return isoRegion;
    }

    public void setIsoRegion(String isoRegion) {
        this.isoRegion = isoRegion;
    }

    public String getLanguageName() {
        return languageName;
    }

    public void setLanguageName(String languageName) {
        this.languageName = languageName;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<BaseKeyboard> getBaseKeyboards() {
        if (baseKeyboards == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BaseKeyboardDao targetDao = daoSession.getBaseKeyboardDao();
            List<BaseKeyboard> baseKeyboardsNew = targetDao._queryAvailableKeyboard_BaseKeyboards(id);
            synchronized (this) {
                if(baseKeyboards == null) {
                    baseKeyboards = baseKeyboardsNew;
                }
            }
        }
        return baseKeyboards;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetBaseKeyboards() {
        baseKeyboards = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here


    @Override
    public long getUId() {
        return getId();
    }

    @Override
    public void insertModel(DaoSession session) {

    }

    @Override
    public TKDatabaseModel setupModelFromJson(JSONObject json) {
        return null;
    }

    @Override
    public TKDatabaseModel setupModelFromJson(JSONObject json, TKDatabaseModel parent) {
        return null;
    }

    @Override
    public boolean updateWithModel(TKDatabaseModel newModel) {
        return false;
    }


    public static AvailableKeyboard getKeyboardFromId(long id, DaoSession session){

        return session.getAvailableKeyboardDao().load(id);
    }

    // KEEP METHODS END

}
