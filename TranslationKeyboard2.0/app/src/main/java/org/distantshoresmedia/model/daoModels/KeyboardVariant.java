package org.distantshoresmedia.model.daoModels;

import java.util.List;
import org.distantshoresmedia.model.daoModels.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table KEYBOARD_VARIANT.
 */
public class KeyboardVariant implements java.io.Serializable {

    private Long id;
    private String name;
    private java.util.Date createdAt;
    private java.util.Date updatedAt;
    private long baseKeyboardId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KeyboardVariantDao myDao;

    private BaseKeyboard baseKeyboard;
    private Long baseKeyboard__resolvedKey;

    private List<KeyPosition> keyPositions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public KeyboardVariant() {
    }

    public KeyboardVariant(Long id) {
        this.id = id;
    }

    public KeyboardVariant(Long id, String name, java.util.Date createdAt, java.util.Date updatedAt, long baseKeyboardId) {
        this.id = id;
        this.name = name;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.baseKeyboardId = baseKeyboardId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKeyboardVariantDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public long getBaseKeyboardId() {
        return baseKeyboardId;
    }

    public void setBaseKeyboardId(long baseKeyboardId) {
        this.baseKeyboardId = baseKeyboardId;
    }

    /** To-one relationship, resolved on first access. */
    public BaseKeyboard getBaseKeyboard() {
        long __key = this.baseKeyboardId;
        if (baseKeyboard__resolvedKey == null || !baseKeyboard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            BaseKeyboardDao targetDao = daoSession.getBaseKeyboardDao();
            BaseKeyboard baseKeyboardNew = targetDao.load(__key);
            synchronized (this) {
                baseKeyboard = baseKeyboardNew;
            	baseKeyboard__resolvedKey = __key;
            }
        }
        return baseKeyboard;
    }

    public void setBaseKeyboard(BaseKeyboard baseKeyboard) {
        if (baseKeyboard == null) {
            throw new DaoException("To-one property 'baseKeyboardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.baseKeyboard = baseKeyboard;
            baseKeyboardId = baseKeyboard.getId();
            baseKeyboard__resolvedKey = baseKeyboardId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<KeyPosition> getKeyPositions() {
        if (keyPositions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeyPositionDao targetDao = daoSession.getKeyPositionDao();
            List<KeyPosition> keyPositionsNew = targetDao._queryKeyboardVariant_KeyPositions(id);
            synchronized (this) {
                if(keyPositions == null) {
                    keyPositions = keyPositionsNew;
                }
            }
        }
        return keyPositions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetKeyPositions() {
        keyPositions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
