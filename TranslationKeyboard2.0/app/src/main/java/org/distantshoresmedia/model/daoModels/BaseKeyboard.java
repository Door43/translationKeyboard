package org.distantshoresmedia.model.daoModels;

import java.util.List;
import org.distantshoresmedia.model.daoModels.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table BASE_KEYBOARD.
 */
public class BaseKeyboard implements java.io.Serializable {

    private Long id;
    private String keyboardName;
    private String isoRegion;
    private String isoLanguage;
    private java.util.Date createdAt;
    private java.util.Date updatedAt;
    private long availableKeyboardId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient BaseKeyboardDao myDao;

    private AvailableKeyboard availableKeyboard;
    private Long availableKeyboard__resolvedKey;

    private List<KeyboardVariant> keyboardVariants;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public BaseKeyboard() {
    }

    public BaseKeyboard(Long id) {
        this.id = id;
    }

    public BaseKeyboard(Long id, String keyboardName, String isoRegion, String isoLanguage, java.util.Date createdAt, java.util.Date updatedAt, long availableKeyboardId) {
        this.id = id;
        this.keyboardName = keyboardName;
        this.isoRegion = isoRegion;
        this.isoLanguage = isoLanguage;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
        this.availableKeyboardId = availableKeyboardId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getBaseKeyboardDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getKeyboardName() {
        return keyboardName;
    }

    public void setKeyboardName(String keyboardName) {
        this.keyboardName = keyboardName;
    }

    public String getIsoRegion() {
        return isoRegion;
    }

    public void setIsoRegion(String isoRegion) {
        this.isoRegion = isoRegion;
    }

    public String getIsoLanguage() {
        return isoLanguage;
    }

    public void setIsoLanguage(String isoLanguage) {
        this.isoLanguage = isoLanguage;
    }

    public java.util.Date getCreatedAt() {
        return createdAt;
    }

    public void setCreatedAt(java.util.Date createdAt) {
        this.createdAt = createdAt;
    }

    public java.util.Date getUpdatedAt() {
        return updatedAt;
    }

    public void setUpdatedAt(java.util.Date updatedAt) {
        this.updatedAt = updatedAt;
    }

    public long getAvailableKeyboardId() {
        return availableKeyboardId;
    }

    public void setAvailableKeyboardId(long availableKeyboardId) {
        this.availableKeyboardId = availableKeyboardId;
    }

    /** To-one relationship, resolved on first access. */
    public AvailableKeyboard getAvailableKeyboard() {
        long __key = this.availableKeyboardId;
        if (availableKeyboard__resolvedKey == null || !availableKeyboard__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AvailableKeyboardDao targetDao = daoSession.getAvailableKeyboardDao();
            AvailableKeyboard availableKeyboardNew = targetDao.load(__key);
            synchronized (this) {
                availableKeyboard = availableKeyboardNew;
            	availableKeyboard__resolvedKey = __key;
            }
        }
        return availableKeyboard;
    }

    public void setAvailableKeyboard(AvailableKeyboard availableKeyboard) {
        if (availableKeyboard == null) {
            throw new DaoException("To-one property 'availableKeyboardId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.availableKeyboard = availableKeyboard;
            availableKeyboardId = availableKeyboard.getId();
            availableKeyboard__resolvedKey = availableKeyboardId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<KeyboardVariant> getKeyboardVariants() {
        if (keyboardVariants == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeyboardVariantDao targetDao = daoSession.getKeyboardVariantDao();
            List<KeyboardVariant> keyboardVariantsNew = targetDao._queryBaseKeyboard_KeyboardVariants(id);
            synchronized (this) {
                if(keyboardVariants == null) {
                    keyboardVariants = keyboardVariantsNew;
                }
            }
        }
        return keyboardVariants;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetKeyboardVariants() {
        keyboardVariants = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
