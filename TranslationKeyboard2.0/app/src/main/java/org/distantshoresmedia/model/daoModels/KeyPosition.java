package org.distantshoresmedia.model.daoModels;

import java.util.List;

import org.distantshoresmedia.model.TKDatabaseModel;
import org.distantshoresmedia.model.daoModels.DaoSession;
import org.json.JSONObject;

import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table KEY_POSITION.
 */
public class KeyPosition extends org.distantshoresmedia.model.TKDatabaseModel  implements java.io.Serializable {

    private Long id;
    private Integer percentWidth;
    private Integer row;
    private Integer column;
    private long keyboardVariantId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KeyPositionDao myDao;

    private KeyboardVariant keyboardVariant;
    private Long keyboardVariant__resolvedKey;

    private List<KeyCharacter> keyPositions;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public KeyPosition() {
    }

    public KeyPosition(Long id) {
        this.id = id;
    }

    public KeyPosition(Long id, Integer percentWidth, Integer row, Integer column, long keyboardVariantId) {
        this.id = id;
        this.percentWidth = percentWidth;
        this.row = row;
        this.column = column;
        this.keyboardVariantId = keyboardVariantId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKeyPositionDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getPercentWidth() {
        return percentWidth;
    }

    public void setPercentWidth(Integer percentWidth) {
        this.percentWidth = percentWidth;
    }

    public Integer getRow() {
        return row;
    }

    public void setRow(Integer row) {
        this.row = row;
    }

    public Integer getColumn() {
        return column;
    }

    public void setColumn(Integer column) {
        this.column = column;
    }

    public long getKeyboardVariantId() {
        return keyboardVariantId;
    }

    public void setKeyboardVariantId(long keyboardVariantId) {
        this.keyboardVariantId = keyboardVariantId;
    }

    /** To-one relationship, resolved on first access. */
    public KeyboardVariant getKeyboardVariant() {
        long __key = this.keyboardVariantId;
        if (keyboardVariant__resolvedKey == null || !keyboardVariant__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeyboardVariantDao targetDao = daoSession.getKeyboardVariantDao();
            KeyboardVariant keyboardVariantNew = targetDao.load(__key);
            synchronized (this) {
                keyboardVariant = keyboardVariantNew;
            	keyboardVariant__resolvedKey = __key;
            }
        }
        return keyboardVariant;
    }

    public void setKeyboardVariant(KeyboardVariant keyboardVariant) {
        if (keyboardVariant == null) {
            throw new DaoException("To-one property 'keyboardVariantId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.keyboardVariant = keyboardVariant;
            keyboardVariantId = keyboardVariant.getId();
            keyboardVariant__resolvedKey = keyboardVariantId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<KeyCharacter> getKeyPositions() {
        if (keyPositions == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeyCharacterDao targetDao = daoSession.getKeyCharacterDao();
            List<KeyCharacter> keyPositionsNew = targetDao._queryKeyPosition_KeyPositions(id);
            synchronized (this) {
                if(keyPositions == null) {
                    keyPositions = keyPositionsNew;
                }
            }
        }
        return keyPositions;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetKeyPositions() {
        keyPositions = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here


    @Override
    public long getUId() {
        return 0;
    }

    @Override
    public void insertModel(DaoSession session) {

    }

    @Override
    public TKDatabaseModel setupModelFromJson(JSONObject json) {
        return null;
    }

    @Override
    public TKDatabaseModel setupModelFromJson(JSONObject json, TKDatabaseModel parent) {
        return null;
    }

    @Override
    public boolean updateWithModel(TKDatabaseModel newModel) {
        return false;
    }

    public static KeyPosition getModelForId(long id, DaoSession session){
        return session.getKeyPositionDao().load(id);
    }
    // KEEP METHODS END

}
