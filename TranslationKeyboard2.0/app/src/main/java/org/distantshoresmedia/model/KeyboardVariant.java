/* Generated by JavaFromJSON */
/*http://javafromjson.dashingrocket.com*/

package org.distantshoresmedia.model;

import android.inputmethodservice.Keyboard;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import java.util.ArrayList;
import java.util.Arrays;

import de.greenrobot.dao.DaoException;

public class KeyboardVariant {

    static final private String kNameKey = "name";
    static final private String kCreatedKey = "created_at";
    static final private String kUpdatedKey = "updated_at";
    static final private String kKeyboardPositionRowKey = "key_position_rows";
    static final private String kKeyboardPositionCollumnKey = "key_position_columns";

    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KeyboardVariantDao myDao;


    private Long id;
    public Long getId() {
        return id;
    }
    public void setId(Long id) {
        this.id = id;
    }

    private String name;
    public void setName(String name) {
        this.name = name;
    }
    public String getName() {
        return name;
    }

	private String createdAt;
 	public void setCreatedAt(String createdAt) {
		this.createdAt = createdAt;
	}
	public String getCreatedAt() {
		return createdAt;
	}

    private String updatedAt;
    public void setUpdatedAt(String updatedAt) {
        this.updatedAt = updatedAt;
    }
    public String getUpdatedAt() {
        return updatedAt;
    }

	private KeyPosition[] keys;
 	public void setKeys(KeyPosition[] keys) {
		this.keys = keys;
	}
	public KeyPosition[] getKeys() {
		return this.keys;
	}

    public KeyboardVariant(String name, String created, String updated, KeyPosition[] keys){
        this.name = name;
        this.createdAt = created;
        this.updatedAt = updated;
        this.keys = keys;
    }

    static public KeyboardVariant getKeyboardFromJsonObject(JSONObject jsonObj){

        System.out.println("Got to KeyboardVariant");

        try {
            // basic elements
            String name = jsonObj.getString(kNameKey);
            String created = jsonObj.getString(kCreatedKey);
            String updated = jsonObj.getString(kUpdatedKey);

            // Get an arraylist of keypositions based on the JSON
            JSONArray rows = jsonObj.getJSONArray(kKeyboardPositionRowKey);
            ArrayList<KeyPosition> positions = new ArrayList<KeyPosition>();

            int total = 0;

            for(int i = 0; i < rows.length(); i++){
                JSONObject rowObj = rows.getJSONObject(i);
                JSONArray columns = rowObj.getJSONArray(kKeyboardPositionCollumnKey);
                if(columns.length() > 0) {
                    for (int j = 0; j < columns.length(); j++) {
                        JSONObject colObj = columns.getJSONObject(j);
                        positions.add(i + j, KeyPosition.getKeyboardFromJsonObject(colObj));
                        total++;
                    }
                }
            }

            // make an array of key positions
            KeyPosition[] finalPositionsArray = new KeyPosition[total];

            int index = 0;
            for(KeyPosition position : positions){
                finalPositionsArray[index++] = position;
            }

            KeyboardVariant finalVariant = new KeyboardVariant(name, created, updated, finalPositionsArray);

            return finalVariant;
        }

        catch (JSONException e) {
            System.out.println("KeyboardVariant JSONException: " + e.toString());
            return null;
        }
    }

    @Override
    public String toString() {
        return "KeyboardVariant{" +
                "name='" + name + '\'' +
                ", createdAt=" + createdAt +
                ", updatedAt=" + updatedAt +
                ", keys=" + Arrays.toString(keys) +
                '}';
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKeyboardVariantDao() : null;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPositions() {
//        KeyboardVariant = null;
    }

    /** Convenient call for {@link (Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
//        myDao.delete(this);
    }

    /** Convenient call for {@link(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
//        myDao.update(this);
    }

    /** Convenient call for {@link(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
//        myDao.refresh(this);
    }
}