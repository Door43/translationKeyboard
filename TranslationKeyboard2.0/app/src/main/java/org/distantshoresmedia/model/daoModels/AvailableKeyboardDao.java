package org.distantshoresmedia.model.daoModels;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import org.distantshoresmedia.model.daoModels.AvailableKeyboard;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table AVAILABLE_KEYBOARD.
*/
public class AvailableKeyboardDao extends AbstractDao<AvailableKeyboard, Long> {

    public static final String TABLENAME = "AVAILABLE_KEYBOARD";

    /**
     * Properties of entity AvailableKeyboard.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IsoLanguage = new Property(1, String.class, "isoLanguage", false, "ISO_LANGUAGE");
        public final static Property IsoRegion = new Property(2, String.class, "isoRegion", false, "ISO_REGION");
        public final static Property LanguageName = new Property(3, String.class, "languageName", false, "LANGUAGE_NAME");
        public final static Property UpdatedAt = new Property(4, java.util.Date.class, "updatedAt", false, "UPDATED_AT");
    };

    private DaoSession daoSession;


    public AvailableKeyboardDao(DaoConfig config) {
        super(config);
    }
    
    public AvailableKeyboardDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'AVAILABLE_KEYBOARD' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'ISO_LANGUAGE' TEXT," + // 1: isoLanguage
                "'ISO_REGION' TEXT," + // 2: isoRegion
                "'LANGUAGE_NAME' TEXT," + // 3: languageName
                "'UPDATED_AT' INTEGER);"); // 4: updatedAt
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'AVAILABLE_KEYBOARD'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, AvailableKeyboard entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String isoLanguage = entity.getIsoLanguage();
        if (isoLanguage != null) {
            stmt.bindString(2, isoLanguage);
        }
 
        String isoRegion = entity.getIsoRegion();
        if (isoRegion != null) {
            stmt.bindString(3, isoRegion);
        }
 
        String languageName = entity.getLanguageName();
        if (languageName != null) {
            stmt.bindString(4, languageName);
        }
 
        java.util.Date updatedAt = entity.getUpdatedAt();
        if (updatedAt != null) {
            stmt.bindLong(5, updatedAt.getTime());
        }
    }

    @Override
    protected void attachEntity(AvailableKeyboard entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public AvailableKeyboard readEntity(Cursor cursor, int offset) {
        AvailableKeyboard entity = new AvailableKeyboard( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // isoLanguage
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // isoRegion
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // languageName
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // updatedAt
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, AvailableKeyboard entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIsoLanguage(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIsoRegion(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setLanguageName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUpdatedAt(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(AvailableKeyboard entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(AvailableKeyboard entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
