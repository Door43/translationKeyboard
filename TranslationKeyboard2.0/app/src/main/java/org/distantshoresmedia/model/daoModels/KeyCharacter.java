package org.distantshoresmedia.model.daoModels;

import org.distantshoresmedia.model.daoModels.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table KEY_CHARACTER.
 */
public class KeyCharacter implements java.io.Serializable {

    private Long id;
    private Integer modMask;
    private Integer unicode;
    private long keyPositionId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient KeyCharacterDao myDao;

    private KeyPosition keyPosition;
    private Long keyPosition__resolvedKey;


    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    public KeyCharacter() {
    }

    public KeyCharacter(Long id) {
        this.id = id;
    }

    public KeyCharacter(Long id, Integer modMask, Integer unicode, long keyPositionId) {
        this.id = id;
        this.modMask = modMask;
        this.unicode = unicode;
        this.keyPositionId = keyPositionId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getKeyCharacterDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public Integer getModMask() {
        return modMask;
    }

    public void setModMask(Integer modMask) {
        this.modMask = modMask;
    }

    public Integer getUnicode() {
        return unicode;
    }

    public void setUnicode(Integer unicode) {
        this.unicode = unicode;
    }

    public long getKeyPositionId() {
        return keyPositionId;
    }

    public void setKeyPositionId(long keyPositionId) {
        this.keyPositionId = keyPositionId;
    }

    /** To-one relationship, resolved on first access. */
    public KeyPosition getKeyPosition() {
        long __key = this.keyPositionId;
        if (keyPosition__resolvedKey == null || !keyPosition__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            KeyPositionDao targetDao = daoSession.getKeyPositionDao();
            KeyPosition keyPositionNew = targetDao.load(__key);
            synchronized (this) {
                keyPosition = keyPositionNew;
            	keyPosition__resolvedKey = __key;
            }
        }
        return keyPosition;
    }

    public void setKeyPosition(KeyPosition keyPosition) {
        if (keyPosition == null) {
            throw new DaoException("To-one property 'keyPositionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.keyPosition = keyPosition;
            keyPositionId = keyPosition.getId();
            keyPosition__resolvedKey = keyPositionId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
